@using MicroS_Common
@using  MicroS_Common.Types
@using  WePing.domain
@using  WePing.domain.Licences.Dto
@using   WePing.Types

@inject LocalStorage localStorage
@inject IStore<WePingState,IAction> store
<!--
<div class="input-group nav-item text-nowrap">
    <input type="text" class="form-control form-control-dark" placeholder="Rechercher" aria-label="Rechercher" @bind-value="SearchTerm">
    <span class="input-group-btn">
        <button type="button" class="btn btn-dark dropdown-toggle" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">@SearchValueType </button>
        <ul class="dropdown-menu dropdown-menu-right bg-dark">
            @foreach (SearchType _type in (SearchType[])Enum.GetValues(typeof(SearchType)))
            {
                <li><a href="#" class="text-light" @onclick="@(() => appState.SetSearchType(_type))">@_type.GetDescription()</a></li>
            }

            <li role="separator" class="dropdown-divider"></li>
            <li><a href="#" class="text-light">Competition</a></li>
        </ul>
    </span>
    @if (appState.SearchOptions.Keys.Count > 0)
    {
        <span class="input-group-btn">
            <button type="button" class="btn btn-dark dropdown-toggle" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">@appState.SelectedSearchOptions @appState.SelectedSearchOptions?.Value</button>
            <div class="dropdown-menu dropdown-menu-right bg-dark px-3">
                <table class="">
                    <tbody>
                        <tr><td>&nbsp;</td><td><button @onclick="@(() => appState.ClearSelectedSearchOption())"><span class="fa fa-minus"></span></button></td><td>&nbsp;</td></tr>
                        @foreach ((string key, SearchOption opt) in appState.SearchOptions)
                        {
                            <tr>
                                <td>
                                    <a href="#" class="text-light" @onclick="@(()=>appState.SelectedSearchOptions=opt)">@opt.ToString()  @opt.Value</a>
                                </td>
                                <td>
                                    @if (appState.HasSelectedSearchoption(key))
                                    {
                                        <button @onclick="@(() => appState.RemoveSelectedSearchOption(key))"><span class="fa fa-minus"></span></button>
                                    }
                                    else
                                    {
                                        <button @onclick="@(() => appState.AddSelectedSearchOption(key))"><span class="fa fa-plus"></span></button>
                                    }
                                </td>
                                <td>
                                    @if (appState.HasSelectedSearchoption(key))
                                    {
                                        <button @onclick="@(() => appState.AddSelectedSearchOption(key))"><span class="fa fa-pen"></span></button>
                                    }
                                    else
                                    {
                                        @(" ")
                                    }
                                </td>
                            </tr>

                        }
                    </tbody>
                </table>
            </div>

        </span>
    }
    <span class="input-group-btn">
        <button class="btn btn-dark" type="button" @onclick="@(() => appState.ExecuteSearch(SearchTerm))">
            <span class="fa fa-search" aria-hidden="true"></span>
        </button>
    </span>
</div>-->


@code {
   /*
    private string _searchTerm = "";
    public string SearchValueType => appState.SearchType.GetDescription();
    public string SearchTerm
    {
        get
        {
            return _searchTerm;
        }
        set
        {
            _searchTerm = value.Trim();


            Task.Run(async () =>
            {
                await localStorage.SetItemAsync("searchTerm", _searchTerm);
            });
        }
    }
    

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var v = Enum.TryParse<SearchType>(await localStorage.GetItemAsync("searchType"), out SearchType type);
            if (v)
                await appState.SetSearchType(type);


            _searchTerm = await localStorage.GetItemAsync("searchTerm") ?? "";
            StateHasChanged();
        }
        await base.OnAfterRenderAsync(firstRender);
    }*/
}

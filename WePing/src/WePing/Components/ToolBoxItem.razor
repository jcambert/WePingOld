@implements IDisposable
<li class="@Class" style="@Visibility">
    @ChildContent
</li>

@code {
    [CascadingParameter]
    public Widget Widget { get; set; }

    [Parameter]
    public RenderFragment ChildContent { get; set; }

    [Parameter]
    public string Class { get; set; } = "";

    [Parameter]
    public bool HideOnCollapse { get; set; } = false;

    public string Visibility { get; set; } = "";

    protected override void OnInitialized()
    {
        base.OnInitialized();
        Widget.OnWidgetCollapsed += OnWidgetCollapsed;
    }
    public async Task OnWidgetCollapsed(bool collapsed)
    {
        await InvokeAsync(() =>
        {

            Visibility = $"visibility:{(collapsed && HideOnCollapse ?"hidden":"visible")}";
            StateHasChanged();
        });
    }

    public void Dispose()
    {
        Widget.OnWidgetCollapsed -= OnWidgetCollapsed;
    }


}
